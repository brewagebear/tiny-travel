plugins {
    id 'org.springframework.boot' version '2.6.2'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
}

group = 'io.dailyworker'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

jar {
    enabled = false
}

ext {
    queryDslVersion = "5.0.0"
    mapstructVersion = "1.4.2.Final"
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    jaxb
}

repositories {
    mavenCentral()
}

task genJaxb {
    ext.sourcesDir = "${buildDir}/generated/jaxb"
    ext.classesDir = "${buildDir}/classes/jaxb"
    ext.schema = "src/main/resources/messages.xsd"

    outputs.dir classesDir

    doLast() {
        project.ant {
            taskdef name: "xjc", classname: "com.sun.tools.xjc.XJCTask",
                    classpath: configurations.jaxb.asPath
            mkdir(dir: sourcesDir)
            mkdir(dir: classesDir)

            xjc(destdir: sourcesDir, schema: schema) {
                arg(value: "-wsdl")
                produces(dir: sourcesDir, includes: "**/*.java")
            }

            javac(destdir: classesDir, source: 11, target: 11, debug: true,
                    debugLevel: "lines,vars,source",
                    classpath: configurations.jaxb.asPath) {
                src(path: sourcesDir)
                include(name: "**/*.java")
                include(name: "*.java")
            }

            copy(todir: classesDir) {
                fileset(dir: sourcesDir, erroronmissingdir: false) {
                    exclude(name: "**/*.java")
                }
            }
        }
    }

}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-hateoas'
    implementation 'org.springframework.boot:spring-boot-starter-web-services'

    // WSDL (Web Service) Dependencies
    implementation 'wsdl4j:wsdl4j'
    implementation 'org.apache.ws.xmlschema:xmlschema-core:2.2.5'
    // Generate jaxb Classes from xsd
    jaxb('com.sun.xml.bind:jaxb-xjc:2.3.1',
         'com.sun.xml.bind:jaxb-impl:2.3.1',
         'org.glassfish.jaxb:jaxb-runtime:2.3.3')
    implementation(files(genJaxb.classesDir).builtBy(genJaxb))

    //QueryDSL Dependencies
    implementation "com.querydsl:querydsl-core:${queryDslVersion}"
    implementation "com.querydsl:querydsl-jpa:${queryDslVersion}"

    // MapStruct Dependencies
    implementation "org.mapstruct:mapstruct:${mapstructVersion}"
    testAnnotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"

    // M1 Dependency Error
    implementation 'io.netty:netty-resolver-dns-native-macos:4.1.72.Final:osx-aarch_64'

    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'com.h2database:h2'

    annotationProcessor ('org.projectlombok:lombok',
            "jakarta.persistence:jakarta.persistence-api",
            "jakarta.annotation:jakarta.annotation-api",
            "org.mapstruct:mapstruct-processor:${mapstructVersion}",
            "com.querydsl:querydsl-apt:${queryDslVersion}:jpa")

    testImplementation 'org.springframework.boot:spring-boot-starter-webflux'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.ws:spring-ws-test'
}

sourceSets {
    main {
        java {
            srcDirs = ["$projectDir/src/main/java", "$projectDir/build/generated"]
        }
    }
}

test {
    useJUnitPlatform()
}

compileJava.dependsOn genJaxb